#!/bin/bash
set -o errexit -o nounset

# This script assumes that $feature and $plugin_so do not contain any special
# characters.
feature=$1
plugin_so=$2
emacs=${3:-emacs}
filename=$4

# In our site lisp, the ecaml plugin is loaded by running (require 'jane-ecaml), and our
# site lisp is loaded at dump time.  To make that work, we make this stub jane-ecaml.el
# which just loads the ecaml plugin without having an associated dump.
cat <<EOF > $filename
;; Temporary wrapper for the ecaml module, overwritten by the real dump after dumping.
(load (concat (file-name-directory load-file-name) "$plugin_so") nil t)
(provide '$feature)
EOF
{
    cat << EOF
;; Wrapper for the ecaml module  -*- lexical-binding: t; byte-compile-dynamic-docstrings: nil -*-
;; This file is generated by dump-ecaml.sh
(require 'cl-lib)
(defconst ecaml-dumped t
  "If non-nil, Ecaml definitions were loaded from a pregenerated dump.")
(if (equal (getenv "TESTING_FRAMEWORK") "inline-test")
    (load "inline_tests_runner" nil t)
  (load (concat (file-name-directory load-file-name) "$plugin_so") nil t))
;; Drop the load-history entry that says the .so defines everything it defined.
;; Ecaml has already added per-ml-file load-history entries.
;; See https://debbugs.gnu.org/cgi/bugreport.cgi?bug=71522
(pop load-history)
EOF
    # Set ECAML_DUMPING so that whenever Ecaml evals a form to define
    # something, it also writes that form to stdout.
    ECAML_DUMPING=true "$emacs" -q --no-site-file --batch -l ./jane-ecaml.el
    cat << EOF
(provide '$feature)
EOF
} | sponge $filename
