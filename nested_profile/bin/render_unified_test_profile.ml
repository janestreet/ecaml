open! Core
open! Async
open! Nested_profile

module Line = struct
  type t =
    { timestamp : Time_ns.t
    ; command : string
    }

  let parse line =
    match String.split line ~on:' ' with
    | timestamp :: command ->
      let timestamp = timestamp |> Int63.of_string |> Time_ns.of_int63_ns_since_epoch in
      { timestamp; command = String.concat ~sep:" " command }
    | _ -> raise_s [%sexp "Couldn't parse line", (line : string)]
  ;;
end

let process_lines lines ~test_name =
  let clock =
    let start_time =
      match lines with
      | [] -> Time_ns.epoch
      | line :: _ -> (Line.parse line).timestamp
    in
    Profile.Private.Clock.create ~now:start_time
  in
  Profile.Private.clock := clock;
  let (_ : Line.t option) =
    profile
      Sync
      (lazy [%sexp (test_name : string)])
      (fun () ->
        List.fold lines ~init:None ~f:(fun last_line line ->
          let line = Line.parse line in
          match last_line with
          | None -> Some line
          | Some last_line ->
            profile
              Sync
              (lazy [%sexp (last_line.command : string)])
              (fun () ->
                let diff = Time_ns.diff line.timestamp last_line.timestamp in
                Profile.Private.Clock.advance clock ~by:diff);
            Some line))
  in
  ()
;;

let command =
  Command.async
    ~summary:
      {|
Read in the intermediate unified test profiling data generated by run-tests.py,
and output a Nested_profile representation.
|}
    (let%map_open.Command () = return ()
     and file = anon ("file" %: string)
     and test_name =
       flag
         "-test-name"
         (required string)
         ~doc:"NAME the name of the test we're profiling"
     and output_file =
       flag "-output-file" (required string) ~doc:"FILE output the nested profile here"
     in
     fun () ->
       Profile.should_profile := true;
       Profile.hide_if_less_than := Time_ns.Span.zero;
       Profile.hide_top_level_if_less_than := Time_ns.Span.zero;
       Profile.never_show_rendering_took := true;
       (Profile.output_profile
        := fun str ->
             Out_channel.with_file output_file ~f:(fun ch ->
               Out_channel.output_string ch str));
       Reader.file_lines file >>| process_lines ~test_name)
    ~behave_nicely_in_pipeline:false
;;

let () = Command_unix.run command
